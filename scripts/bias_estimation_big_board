#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import os
import matplotlib.pyplot as plt
import yaml
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import rospy
from ros_numpy import msgify, numpify
from rosbag import Bag
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import PointStamped
from tqdm import tqdm
import numpy as np
from numpy.lib.recfunctions import unstructured_to_structured, structured_to_unstructured
from scipy.spatial.transform import Rotation
from depth_correction.filters import filter_box, filter_depth, filter_grid
import open3d as o3d
from time import time
import torch
from depth_correction.model import load_model
from depth_correction.config import Config, Model
from depth_correction.depth_cloud import DepthCloud
from depth_correction.utils import transform, normalize
import copy

VIS = 1
CORRECTION = 1
TIME_TOL = 0.05  # sec

cfg = Config()
cfg.model_class = Model.ScaledPolynomial
cfg.model_kwargs = {'w': [-0.005], 'exponent': [4]}
# cfg.model_class = Model.Polynomial
# cfg.model_kwargs = {'w': [-0.02], 'exponent': [4]}
# cfg.model_state_dict = os.path.realpath(os.path.join(__file__, '../../gen/fee_corridor_d1-25_g0.20/ground_truth_none_Polynomial_r0.40_e0e1_0-0.25_e1e2_0.25-1_dd_0.09-nan_vpd_0.36-nan_min_eigval_loss_sqrt0_norm1_icp_inlier_ratio_0.3_icp_point_to_plane_True_lr0.0002/split_2/199_0.0206452_state_dict.pth'))


def str2bool(v):
    return v.lower() in ('1', 'yes', 'true', 't', 'y')

def get_topic_types(bag):
    return {k: v.msg_type for k, v in bag.get_type_and_topic_info().topics.items()}

def slots(msg):
    """Return message attributes (slots) as list."""
    return [getattr(msg, var) for var in msg.__slots__]

def correction(cloud, model, cfg, inc_angles=None):
    with torch.no_grad():
        cloud = DepthCloud.from_structured_array(cloud)
        if inc_angles is None:
            cloud.update_all(k=cfg.nn_k, r=cfg.nn_r)
        else:
            cloud.inc_angles = torch.from_numpy(inc_angles)

        cloud = model(cloud)
        cloud.update_points()
        # print('Estimated mean inc angle: %f [deg]' % np.rad2deg(cloud.inc_angles.cpu().numpy().mean()))
        # cloud.visualize(colors=cloud.inc_angles, window_name='Incidence angles')
    output_cloud = cloud.to_structured_array()
    return output_cloud

def visualize_cloud_3d(ax, cloud, **kwargs):
    ax.plot(cloud['x'], cloud['y'], cloud['z'], '.', **kwargs)

# https://stackoverflow.com/questions/13685386/matplotlib-equal-unit-length-with-equal-aspect-ratio-z-axis-is-not-equal-to
def set_axes_equal(ax):
    '''Make axes of 3D plot have equal scale so that spheres appear as spheres,
    cubes as cubes, etc..  This is one possible solution to Matplotlib's
    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.

    Input
      ax: a matplotlib axis, e.g., as output from plt.gca().
    '''

    x_limits = ax.get_xlim3d()
    y_limits = ax.get_ylim3d()
    z_limits = ax.get_zlim3d()

    x_range = abs(x_limits[1] - x_limits[0])
    x_middle = np.mean(x_limits)
    y_range = abs(y_limits[1] - y_limits[0])
    y_middle = np.mean(y_limits)
    z_range = abs(z_limits[1] - z_limits[0])
    z_middle = np.mean(z_limits)

    # The plot bounding box is a sphere in the sense of the infinity
    # norm, hence I call half the max range the plot radius.
    plot_radius = 0.5*max([x_range, y_range, z_range])

    ax.set_xlim3d([x_middle - plot_radius, x_middle + plot_radius])
    ax.set_ylim3d([y_middle - plot_radius, y_middle + plot_radius])
    ax.set_zlim3d([z_middle - plot_radius, z_middle + plot_radius])

def draw_registration_result(source, target, transformation):
    source_temp = copy.deepcopy(source)
    target_temp = copy.deepcopy(target)
    source_temp.paint_uniform_color([1, 0.706, 0])
    target_temp.paint_uniform_color([0, 0.651, 0.929])
    source_temp.transform(transformation)
    o3d.visualization.draw_geometries([source_temp, target_temp])

def bias_estimation(bag_path, data):
    def visualize(axes):
        ax = axes[0]
        ax.cla()
        ax.set_title('Incidence angle %.1f [deg]' % np.rad2deg(angle_y))
        ax.axis('equal')
        # coordinate system vis
        ax.spines['top'].set_color('none')
        ax.spines['bottom'].set_position('zero')
        ax.spines['left'].set_position('zero')
        ax.spines['right'].set_color('none')
        # ouster points
        if ouster_cloud_box_cor is not None:
            ax.plot(ouster_cloud_box_cor['x'], ouster_cloud_box_cor['z'], 'o', color='g')
        ax.plot(ouster_cloud_box['x'], ouster_cloud_box['z'], 'o', color='r')
        ax.quiver(ouster_cloud_box['x'], ouster_cloud_box['z'], board_normal[0], board_normal[2])
        ax.plot(board_cloud['x'], board_cloud['z'], 'o', color='b')
        # lc = board_base_xyz[:2] + normalize(v[:2]) * board_length / 2.
        # rc = board_base_xyz[:2] - normalize(v[:2]) * board_length / 2.
        # ax.plot([lc[0], rc[0]], [lc[1], rc[1]], '--', linewidth=2, color='k')

        ax = axes[1]
        ax.cla()
        visualize_cloud_3d(ax, ouster_cloud_box, color='r')
        visualize_cloud_3d(ax, board_cloud, color='b')
        if ouster_cloud_box_cor is not None:
            visualize_cloud_3d(ax, ouster_cloud_box_cor, color='g')
        # # board plane
        # draw_parallelepiped(ax, size=(0.015, board_length, board_height), T=box_T, edgecolor='k', alpha=.0)
        # # filtration region
        # draw_parallelepiped(ax, size=box_size, T=box_T, facecolors='cyan', linewidths=1, edgecolors='r', alpha=.25)
        set_axes_equal(ax)

        ax = axes[2]
        ax.cla()
        ax.set_title('Point-to-plane dist (incidence angle)')
        ax.set_xlim([-10, 90])
        # ax.set_ylim([0, 0.1])
        ax.plot(angles, pt2pl_errs, '--', color='r', label='dist=%.3f' % np.mean(pt2pl_errs))
        if len(pt2pl_errs_cor) > 0:
            ax.plot(angles, pt2pl_errs_cor, color='g', label='dist cor=%.3f' % np.mean(pt2pl_errs_cor))
        ax.grid()
        ax.legend()

    measurements = data['measurements']
    board_height = np.abs(measurements['world_TL'][2] - measurements['world_BL'][2]) + 0.02  # Z
    board_length = np.abs(measurements['world_TL'][1] - measurements['world_TR'][1])  # Y
    board_width = 0.02

    model = load_model(cfg=cfg)

    board_normal = None
    ouster_cloud = None
    board_base_xyz = (np.asarray(measurements['world_BL']) + np.asarray(measurements['world_TL'])) / 2.
    # board_base_xyz[0] = measurements['world_TR'][0]
    board_cloud0 = (np.random.random((500, 3)) - 0.5) * np.array([board_width, board_length, board_height])
    board_cloud0 = unstructured_to_structured(board_cloud0, names=['x', 'y', 'z'])
    v = measurements['world_TR'] - board_base_xyz
    v = normalize(v)
    board_normal0 = normalize(np.cross(v, np.array([0., 1., 0.])))

    # TODO: find transformation by ICP alignment to ground truth map
    Tr_world_ouster = np.asarray(data['T_world_ouster']).reshape((4, 4))

    if VIS:
        fig = plt.figure(figsize=(18, 6))
        axes = []
        ax = fig.add_subplot(1, 3, 1)
        axes.append(ax)
        ax = fig.add_subplot(1, 3, 2, projection='3d')
        axes.append(ax)
        ax = fig.add_subplot(1, 3, 3)
        axes.append(ax)
    pt2pl_errs = []
    pt2pl_errs_cor = []
    angles = []
    R = None
    ouster_cloud_box_cor = None
    # stamp0 = next(iter(Bag(bag_path, 'r').read_messages(topics=[data['cloud_topic'], data['leica_topic']])))[2].to_sec()
    # stamp0 = stamp0 + 60.
    # stampN = stamp0 + 30.
    stamp0 = None
    stampN = None

    if stamp0 is not None:
        stamp0 = rospy.Time.from_sec(stamp0)
        stampN = rospy.Time.from_sec(stampN)

    with Bag(bag_path, 'r') as bag:
        for topic, msg, stamp in tqdm(bag.read_messages(topics=[data['cloud_topic'], data['leica_topic']],
                                                        start_time=stamp0, end_time=stampN)):

            if topic == data['cloud_topic']:
                t0 = time()

                msg = PointCloud2(*slots(msg))
                cloud_time = stamp.to_sec()

                ouster_cloud = numpify(msg)
                ouster_cloud = ouster_cloud.reshape((-1,))
                ouster_cloud = filter_depth(ouster_cloud, min=5., max=12.)
                ouster_cloud = transform(Tr_world_ouster, ouster_cloud)
                box_T = np.eye(4)
                box_T[:3, 3] = board_base_xyz + np.asarray([0., -board_length / 2., 0.])
                if R is not None:
                    box_T[:3, :3] = R
                board_cloud = transform(box_T, board_cloud0)
                box_size = np.asarray([0.3, 0.8*board_length, 0.8*board_height])
                ouster_cloud_box = filter_box(ouster_cloud, box_size=box_size, box_T=box_T)
                # print('Cloud processing took: %.3f [sec]' % (time() - t0))

            if topic == data['leica_topic']:
                t0 = time()
                # get board orientation in world frame
                msg = PointStamped(*slots(msg))
                leica_time = stamp.to_sec()

                crystal_pose = np.asarray([msg.point.x, msg.point.y, msg.point.z])
                v = crystal_pose - board_base_xyz
                # v *= np.sign(np.dot([0, 1], v[:2]))  # choose board vector having positive Y-direction
                v = normalize(v)
                angle_y = -np.arctan2(v[2], v[0]) + np.pi / 2  # angle between vector in the board plane V and Y-axis
                R = np.asarray(Rotation.from_euler('y', angle_y, degrees=False).as_matrix())
                board_normal = R @ board_normal0
                # print('Board localization took: %.3f [sec]' % (time() - t0))

            if ouster_cloud is None or board_normal is None:
                print('Ouster cloud or board tracking is not yet available')
                continue

            # if np.rad2deg(angle_y) < 10.:
            #     print('Board orientation: %.3f < %.3f [deg]' % (np.rad2deg(angle_y), 10.))
            #     continue

            if np.abs(cloud_time - leica_time) > TIME_TOL:
                print('Cloud and leica msgs time difference is too large: %.3f > %.3f [sec]' %
                      (np.abs(cloud_time - leica_time), TIME_TOL))
                continue

            if len(ouster_cloud_box) > 0:
                # plane (A, B, C, D), where n = (A,B,C), D = -(n, p), point p belongs to plane
                pt2pl_cor = None
                if CORRECTION:
                    ouster_cloud_box_cor = correction(cloud=ouster_cloud_box, model=model, cfg=cfg,
                                                      inc_angles=np.repeat([angle_y], len(ouster_cloud_box))[None].T)
                    points_cor = structured_to_unstructured(ouster_cloud_box_cor[['x', 'y', 'z']])
                    dists_cor = board_normal @ (points_cor - board_base_xyz).T
                    pt2pl_cor = np.abs(dists_cor).mean()
                    pt2pl_errs_cor.append(pt2pl_cor)

                points = structured_to_unstructured(ouster_cloud_box[['x', 'y', 'z']])
                dists = board_normal @ (points - board_base_xyz).T
                pt2pl = np.abs(dists).mean()
                pt2pl_errs.append(pt2pl)
                angles.append(np.rad2deg(angle_y))
                if pt2pl_cor is not None:
                    print('For board angle %.1f [deg], point-to-plane distance: %.3f [m] (dc: %.3f [m])' %
                          (np.rad2deg(angle_y), pt2pl, pt2pl_cor))
            else:
                print('No ouster points in the box for box angle: %.1f [deg]' % np.rad2deg(angle_y))
                continue

            # visualization
            if VIS:
                # pcd_ouster_box = o3d.geometry.PointCloud()
                # pcd_ouster_box.points = o3d.utility.Vector3dVector(structured_to_unstructured(ouster_cloud_box[['x', 'y', 'z']]))
                # pcd_ouster_box.normals = o3d.utility.Vector3dVector(np.repeat(board_normal[None], len(ouster_cloud_box), axis=0))
                # pcd_ouster_box.paint_uniform_color([1, 0, 0])
                #
                # pcd_board = o3d.geometry.PointCloud()
                # pcd_board.points = o3d.utility.Vector3dVector(structured_to_unstructured(board_cloud[['x', 'y', 'z']]))
                # pcd_board.paint_uniform_color([0, 1, 0])
                #
                # pcd_ouster = o3d.geometry.PointCloud()
                # pcd_ouster.points = o3d.utility.Vector3dVector(structured_to_unstructured(ouster_cloud[['x', 'y', 'z']]))
                # pcd_ouster.paint_uniform_color([0, 0, 1])
                #
                # o3d.visualization.draw_geometries([pcd_ouster_box, pcd_ouster, pcd_board], point_show_normal=True)

                visualize(axes)
                plt.pause(0.001)

    if len(pt2pl_errs) > 0:
        angles = np.asarray(angles)
        pt2pl_errs = np.asarray(pt2pl_errs)
        print('point-to-plane distance: %.3f (mean, [m]),  %.3f (max, [m])' %
              (np.mean(pt2pl_errs).item(), np.max(pt2pl_errs).item()))
        # print('point-to-plane distance for angles > 60 [deg]: %.3f (mean, [m]),  %.3f (max, [m])' %
        #       (np.mean(pt2pl_errs[angles > 60.]).item(), np.max(pt2pl_errs[angles > 60.]).item()))

        print('Saving results...')
        np.savetxt(bag_path.replace('.bag', '_bias_estimation.csv'),
                   np.stack([angles, pt2pl_errs, pt2pl_errs_cor]).T, delimiter=',',
                   header='Angles [deg], ICP dist [m], ICP dist DC [m]')
        if VIS:
            plt.savefig(bag_path.replace('.bag', '_bias_estimation_dc_%s_model_%s_%s.png' %
                                                 (CORRECTION, cfg.model_class, cfg.model_kwargs)))
            plt.show()

def draw_parallelepiped(ax, size=(1., 1., 1.), T=None, **kwargs):
    l, w, h = size
    points = np.array([[-l, -w, -h],
                       [l, -w, -h],
                       [l, w, -h],
                       [-l, w, -h],
                       [-l, -w, h],
                       [l, -w, h],
                       [l, w, h],
                       [-l, w, h]]) / 2.

    if T is None:
        T = np.eye(4)
    R = T[:3, :3]
    center = T[:3, 3]

    points = points @ R.T + center

    # plot center
    ax.plot(center[0], center[1], center[2], 'x')

    # plot vertices
    ax.scatter3D(points[:, 0], points[:, 1], points[:, 2])

    # list of sides' polygons of figure
    verts = [[points[0], points[1], points[2], points[3]],
             [points[4], points[5], points[6], points[7]],
             [points[0], points[1], points[5], points[4]],
             [points[2], points[3], points[7], points[6]],
             [points[1], points[2], points[6], points[5]],
             [points[4], points[7], points[3], points[0]]]
    # plot sides
    ax.add_collection3d(Poly3DCollection(verts, **kwargs))

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')


def icp_demo():
    from depth_correction.datasets.fee_corridor import Dataset

    # bag_file = 'fee_corridor/bags/leica_ouster/big_board/8m/depth_correction_2023-02-06-16-15-50.bag'
    bag_file = 'fee_corridor/bags/leica_ouster/big_board/8m/depth_correction_black_board_2023-02-06-16-46-40.bag'

    bag_path = os.path.realpath(os.path.join(__file__, '../../data', bag_file))

    # get ouster cloud
    with Bag(bag_path, 'r') as bag:
        for topic, msg, stamp in tqdm(bag.read_messages(topics=['/ouster/points'])):
            msg = PointCloud2(*slots(msg))
            cloud_time = stamp.to_sec()

            ouster_cloud = numpify(msg)
            break
    ouster_cloud = ouster_cloud.reshape((-1,))
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(structured_to_unstructured(ouster_cloud[['x', 'y', 'z']]))

    # Leica scanner GT cloud
    ds = Dataset(name='seq1', zero_origin=False)
    leica_cloud = ds.global_cloud(resolution_cm=5.)
    pcd_gt = o3d.geometry.PointCloud()
    pcd_gt.points = o3d.utility.Vector3dVector(structured_to_unstructured(leica_cloud[['x', 'y', 'z']]))

    trans_init = np.array([[0.96222896, 0.26997932, -0.03502283, 0.42472884],
                           [-0.27006718, 0.96283876, 0.00228684, 0.40569871],
                           [0.03433874, 0.00725805, 0.9993839, 0.34870928],
                           [0., 0., 0., 1., ]])
    # trans_init = np.eye(4)

    draw_registration_result(pcd, pcd_gt, np.eye(4))

    print("Apply point-to-point ICP")
    reg_p2p = o3d.pipelines.registration.registration_icp(pcd, pcd_gt, 0.2, trans_init,
        o3d.pipelines.registration.TransformationEstimationPointToPoint(),
        o3d.pipelines.registration.ICPConvergenceCriteria(max_iteration=2000))
    print(reg_p2p)
    print("Transformation is:")
    print(reg_p2p.transformation)
    print('Rotation angles:', np.rad2deg(Rotation.from_matrix(reg_p2p.transformation[:3, :3].copy()).as_euler('xyz')))

    draw_registration_result(pcd, pcd_gt, reg_p2p.transformation)

def main():
    # bag_file = 'fee_corridor/bags/leica_ouster/big_board/8m/depth_correction_2023-02-06-16-15-50.bag'
    bag_file = 'fee_corridor/bags/leica_ouster/big_board/8m/depth_correction_black_board_2023-02-06-16-46-40.bag'

    bag_path = os.path.realpath(os.path.join(__file__, '../../data', bag_file))
    assert os.path.exists(bag_path)
    data_path = bag_path.replace('.bag', '.yaml')
    assert os.path.exists(data_path)

    with open(data_path, 'r') as f:
        data = yaml.safe_load(f)
    assert data is not None

    bias_estimation(bag_path, data)


if __name__ == '__main__':
    main()
    # icp_demo()
