#!/usr/bin/env python
from __future__ import absolute_import, division, print_function
from depth_correction.config import Config
from depth_correction.preproc import filtered_cloud
from ros_numpy import msgify, numpify
import rospy
from sensor_msgs.msg import PointCloud2


class CloudFilter(object):

    def __init__(self):
        self.cfg = Config()
        self.cfg.from_rosparam()
        self.max_age = rospy.get_param('~max_age', 1.0)

        self.pub = rospy.Publisher('output', PointCloud2, queue_size=2)
        self.sub = rospy.Subscriber('input', PointCloud2, self.process_cloud, queue_size=2)

    def filter_cloud(self, input_msg):
        assert isinstance(input_msg, PointCloud2)
        cloud = numpify(input_msg)
        cloud = filtered_cloud(cloud, self.cfg)
        output_msg = msgify(PointCloud2, cloud)
        output_msg.header = input_msg.header
        return output_msg

    def process_cloud(self, input_msg):
        assert isinstance(input_msg, PointCloud2)

        age = (rospy.Time.now() - input_msg.header.stamp).to_sec()
        if age > self.max_age:
            rospy.logwarn('Skipping message %.3f s > %.3f s old.', age, self.max_age)
            return

        output_msg = self.filter_cloud(input_msg)
        self.pub.publish(output_msg)


def main():
    rospy.init_node('cloud_filter', log_level=rospy.INFO)
    node = CloudFilter()
    rospy.spin()


if __name__ == '__main__':
    main()
