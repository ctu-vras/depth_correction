#!/usr/bin/env python
from __future__ import absolute_import, division, print_function
from depth_correction.depth_cloud import DepthCloud
from depth_correction.filters import *
from depth_correction.model import *
from depth_correction.utils import timing
from ros_numpy import msgify, numpify
import rospy
from sensor_msgs.msg import PointCloud2
import torch
from timeit import default_timer as timer


def load_model(class_name, state_dict, device=torch.device('cpu')):
    if isinstance(device, str):
        device = torch.device(device)
    Class = eval(class_name)
    model = Class()
    assert isinstance(model, BaseModel)
    if state_dict:
        rospy.loginfo('Using %s model on %s device with state %s.', class_name, device, state_dict)
        model.load_state_dict(torch.load(state_dict))
    else:
        rospy.logwarn('Using %s model on %s device with initial state.', class_name, device)
    model.eval()
    model.to(device)
    return model


class DepthCorrection(object):
    def __init__(self):
        self.device = torch.device(rospy.get_param('~device', 'cpu'))
        self.float_type = rospy.get_param('~float_type', None)
        if self.float_type == 'float32':
            self.float_type = torch.float32
        elif self.float_type == 'float64':
            self.float_type = torch.float64
        if self.float_type:
            rospy.loginfo('Ensure floating-point type: %s', self.float_type)

        self.int_type = rospy.get_param('~int_type', None)
        if self.int_type == 'int32':
            self.int_type = torch.int32
        elif self.int_type == 'int64':
            self.int_type = torch.int64
        if self.int_type:
            rospy.loginfo('Ensure integer type: %s', self.int_type)

        self.model = load_model(rospy.get_param('~model/class'),
                                rospy.get_param('~model/state_dict', None),
                                self.device)

        self.max_age = rospy.get_param('~max_age', 1.0)
        self.k_nn = rospy.get_param('~k_nn', None)
        self.r_nn = rospy.get_param('~r_nn', 0.15)

        # Point-wise and grid-based filtering.
        self.min_depth = rospy.get_param('~min_depth', 1.0)
        self.max_depth = rospy.get_param('~max_depth', 10.0)
        self.grid_res = rospy.get_param('~grid_res', 0.05)
        publish_filtered = self.min_depth or self.max_depth or self.grid_res
        self.publish_filtered = rospy.get_param('~publish_filtered', publish_filtered)

        # Eigenvalue bounds as [[eigenvalue number, mininum, maximum], [...]]
        self.eigenvalue_bounds = rospy.get_param('~eigenvalue_bounds', [])
        if not self.eigenvalue_bounds:
            self.eigenvalue_bounds = []

        if self.publish_filtered:
            self.filtered_pub = rospy.Publisher('filtered_cloud', PointCloud2, queue_size=2)
        self.corrected_pub = rospy.Publisher('corrected_cloud', PointCloud2, queue_size=2)
        self.cloud_sub = rospy.Subscriber('cloud', PointCloud2, self.process_cloud, queue_size=2)

    @timing
    def correct_depth(self, input_msg):
        assert isinstance(input_msg, PointCloud2)
        input_cloud = numpify(input_msg)
        if 'vp_x' not in input_cloud.dtype.names:
            rospy.logwarn_once('Point cloud does not contain viewpoint fields (vp_x not among %s).',
                               ', '.join(input_cloud.dtype.names))

        rospy.logdebug("Received point cloud for depth correction")
        t = timer()
        with torch.no_grad():
            dc = DepthCloud.from_structured_array(input_cloud)
            dc.to(device=self.device, float_type=self.float_type, int_type=self.int_type)
            if self.min_depth or self.max_depth:
                dc = filter_depth(dc, min=self.min_depth, max=self.max_depth, log=False)
            if self.grid_res:
                dc = filter_grid(dc, self.grid_res, keep='last')

            if self.publish_filtered and self.filtered_pub.get_num_connections() > 0:
                filtered_cloud = dc.to_structured_array()
                filtered_msg = msgify(PointCloud2, filtered_cloud)
                filtered_msg.header = input_msg.header
                self.filtered_pub.publish(filtered_msg)

            dc.update_all(k=self.k_nn, r=self.r_nn)
            # Select points to correct with the mask.
            mask = None
            for eig, min, max in self.eigenvalue_bounds:
                eig_mask = filter_eigenvalue(dc, eig, min=min, max=max, only_mask=True, log=False)
                mask = eig_mask if mask is None else (mask & eig_mask)
            dc = self.model.correct_depth(dc, mask)

        rospy.logdebug("Processed cloud in %.3f sec" % (timer() - t))

        output_cloud = dc.to_structured_array()
        output_msg = msgify(PointCloud2, output_cloud)
        output_msg.header = input_msg.header
        return output_msg

    def process_cloud(self, input_msg):
        assert isinstance(input_msg, PointCloud2)

        age = (rospy.Time.now() - input_msg.header.stamp).to_sec()
        if age > self.max_age:
            rospy.logwarn('Skipping message %.3f s > %.3f s old.', age, self.max_age)
            return

        output_msg = self.correct_depth(input_msg)
        self.corrected_pub.publish(output_msg)


def main():
    rospy.init_node('depth_correction', log_level=rospy.INFO)
    node = DepthCorrection()
    rospy.spin()


if __name__ == '__main__':
    main()
