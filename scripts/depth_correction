#!/usr/bin/env python
from __future__ import absolute_import, division, print_function
from depth_correction.config import Config
from depth_correction.model import BaseModel, load_model
from depth_correction.preproc import local_feature_cloud
from depth_correction.utils import timing
from ros_numpy import msgify, numpify
import rospy
from sensor_msgs.msg import PointCloud2
import torch
from timeit import default_timer as timer


class DepthCorrection(object):
    def __init__(self):
        self.cfg = Config()
        self.cfg.from_rosparam()
        self.max_age = rospy.get_param('~max_age', 1.0)

        self.model = load_model(cfg=self.cfg)

        publish_filtered = any([self.cfg.min_depth, self.cfg.max_depth, self.cfg.grid_res])
        self.publish_filtered = rospy.get_param('~publish_filtered', publish_filtered)

        if self.publish_filtered:
            self.filtered_pub = rospy.Publisher('filtered_cloud', PointCloud2, queue_size=2)
        self.corrected_pub = rospy.Publisher('output', PointCloud2, queue_size=2)
        self.cloud_sub = rospy.Subscriber('input', PointCloud2, self.process_cloud, queue_size=2)

    def correct_depth(self, input_msg):
        assert isinstance(input_msg, PointCloud2)
        input_cloud = numpify(input_msg)
        if 'vp_x' not in input_cloud.dtype.names:
            rospy.logwarn_once('Point cloud does not contain viewpoint fields (vp_x not among %s).',
                               ', '.join(input_cloud.dtype.names))

        rospy.logdebug("Received point cloud for depth correction")
        t = timer()
        with torch.no_grad():
            # Assume that depth and grid filters are run earlier.
            dc = local_feature_cloud(input_cloud, self.cfg)

            if self.publish_filtered and self.filtered_pub.get_num_connections() > 0:
                filtered_cloud = dc.to_structured_array()
                filtered_msg = msgify(PointCloud2, filtered_cloud)
                filtered_msg.header = input_msg.header
                self.filtered_pub.publish(filtered_msg)

            dc = self.model(dc)
            dc.update_points()

        rospy.logdebug("Processed cloud in %.3f sec" % (timer() - t))

        output_cloud = dc.to_structured_array()
        output_msg = msgify(PointCloud2, output_cloud)
        output_msg.header = input_msg.header
        return output_msg

    def process_cloud(self, input_msg):
        assert isinstance(input_msg, PointCloud2)

        age = (rospy.Time.now() - input_msg.header.stamp).to_sec()
        if age > self.max_age:
            rospy.logwarn('Skipping message %.3f s > %.3f s old.', age, self.max_age)
            return

        output_msg = self.correct_depth(input_msg)
        self.corrected_pub.publish(output_msg)


def main():
    rospy.init_node('depth_correction', log_level=rospy.INFO)
    node = DepthCorrection()
    rospy.spin()


if __name__ == '__main__':
    main()
