#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import rospy
from geometry_msgs.msg import PointStamped
import numpy as np
from geometry_msgs.msg import TransformStamped, Transform
from sensor_msgs.msg import PointCloud2
import tf2_ros
from tf.transformations import quaternion_from_euler, quaternion_matrix
from visualization_msgs.msg import Marker
from numpy.lib.recfunctions import unstructured_to_structured, structured_to_unstructured
from ros_numpy import msgify, numpify
from depth_correction.loss import point_to_point_dist, point_to_plane_dist
from depth_correction.io import append, write
from depth_correction.filters import filter_box
from depth_correction.model import load_model
from depth_correction.config import Config
from depth_correction.preproc import local_feature_cloud, filtered_cloud
from depth_correction.config import Model
import open3d as o3d
from matplotlib import pyplot as plt
from threading import RLock
import torch
from time import time


def create_marker(p=None, q=None, scale=None, color=None, alpha=0.8, type=Marker.ARROW):
    if color is None:
        color = [0, 1, 0]
    if scale is None:
        scale = [1, 1, 1]
    if q is None:
        q = [0, 0, 0, 1]
    if p is None:
        p = [0, 0, 0]
    marker = Marker()
    marker.type = type
    marker.action = Marker.ADD
    marker.pose.position.x = p[0]
    marker.pose.position.y = p[1]
    marker.pose.position.z = p[2]
    marker.pose.orientation.x = q[0]
    marker.pose.orientation.y = q[1]
    marker.pose.orientation.z = q[2]
    marker.pose.orientation.w = q[3]
    marker.scale.x = scale[0]
    marker.scale.y = scale[1]
    marker.scale.z = scale[2]
    marker.color.a = alpha
    marker.color.r = color[0]
    marker.color.g = color[1]
    marker.color.b = color[2]
    return marker


class Transformation(object):
    def __init__(self, frame, child_frame, translation=None, rotation=None):
        if translation is None:
            translation = [0, 0, 0]
        if rotation is None:
            rotation = [0, 0, 0, 1]
        self.frame = frame
        self.child_frame = child_frame
        self.translation = translation
        self.rotation = rotation

    def __str__(self):
        return 'Translation: %s, Rotation: %s' % (self.translation, self.rotation)


def normalize(v):
    norm = np.linalg.norm(v)
    if norm == 0:
        return v
    return v / norm

def transform_cloud(cloud, Tr):
    assert isinstance(cloud, np.ndarray)
    if cloud.dtype.names:
        pts = structured_to_unstructured(cloud[['x', 'y', 'z']])
    else:
        pts = cloud
    R, t = Tr[:-1, :-1], Tr[:-1, -1:]
    pts_tr = pts @ R.T + t.T
    if cloud.dtype.names:
        cloud_tr = cloud.copy()
        cloud_tr[['x', 'y', 'z']] = unstructured_to_structured(pts_tr, names=['x', 'y', 'z'])
    else:
        cloud_tr = pts_tr
    return cloud_tr


# pcd1 = o3d.geometry.PointCloud()
# pcd1.points = o3d.utility.Vector3dVector(board_points)
# pcd1.colors = o3d.utility.Vector3dVector(np.zeros_like(board_points) + np.array([0, 1, 0]))
#
# pcd2 = o3d.geometry.PointCloud()
# pcd2.points = o3d.utility.Vector3dVector(ouster_points)
# pcd2.colors = o3d.utility.Vector3dVector(np.zeros_like(ouster_points) + np.array([0, 0, 1]))
# o3d.visualization.draw_geometries([pcd1, pcd2])

class Process(object):

    def __init__(self):
        # for black side of the calibration board
        self.measurements = {'subt_corner': np.asarray([5.2622, -0.5873, 0.1312]),
                             'subt_base': np.asarray([5.2620, -0.0084, -0.3582]),
                             'subt_crystal': np.asarray([5.2567, 0.5753, 0.1589])}
        # for white side of the calibration board
        # self.measurements = {'subt_corner': np.asarray([5.2576, 0.5684, 0.1379]),
        #                      'subt_base': np.asarray([5.2603, -0.0051, -0.3578]),
        #                      'subt_crystal': np.asarray([5.2441, -0.5964, 0.1509])}

        self.gt_dist_to_board = self.measurements['subt_base'][0]

        self.cfg = Config()
        self.cfg.model_class = Model.ScaledPolynomial
        self.cfg.model_kwargs = {'w': [-0.0011], 'exponent': [4]}
        self.cfg.eigenvalue_ratio_bounds = []
        self.cfg.log_filters = True
        self.depth_correction = rospy.get_param('~depth_correction', False)
        self.model = load_model(cfg=self.cfg)

        # for point cloud filtering
        self.board_height = self.measurements['subt_corner'][2] - self.measurements['subt_base'][2] - 0.01  # Z
        self.board_length = self.measurements['subt_crystal'][1] - self.measurements['subt_corner'][1]  # Y
        self.board_width = 0.015  # X
        self.board_box_size = 0.4 * np.asarray([self.board_length, self.board_length, self.board_height])

        self.Tr_world_ouster = np.array([[0.99832296, -0.05795125, -0.0035224, 0.],
                                         [0.05796774, 0.99802342, 0.02213984, 0.],
                                         [0.0023, -0.0223, 0.9997, -0.1],
                                         [0., 0., 0., 1.]])

        self.static_frame = 'subt'
        self.ouster_pose = None
        self.ouster_msg = None
        self.board_pose = None
        self.board_angle = None
        self.board_normal = None
        self.static_transforms = self.measurements_to_transforms()
        self.board_cloud = self.generate_board_cloud()
        self.max_age = rospy.get_param('~max_age', 0.1)

        self.tf_br = tf2_ros.TransformBroadcaster()
        self.tf_buffer = tf2_ros.Buffer(cache_time=rospy.Duration.from_sec(1.0))
        self.tf_listerner = tf2_ros.TransformListener(self.tf_buffer)

        self.arrow_pub = rospy.Publisher('normal', Marker, queue_size=1)
        self.plane_pub = rospy.Publisher('plane', Marker, queue_size=1)
        self.cloud_pub = rospy.Publisher('board_cloud', PointCloud2, queue_size=1)
        self.filtered_cloud_pub = rospy.Publisher('ouster_board_cloud', PointCloud2, queue_size=1)

        self.leica_lock = RLock()
        self.ouster_lock = RLock()
        self.leica_sub = rospy.Subscriber('crystal_points',
                                          PointStamped, callback=self.leica_process, queue_size=1)
        self.ouster_sub = rospy.Subscriber('cloud', PointCloud2, callback=self.ouster_process, queue_size=1)
        self.spin()

    def correction(self, cloud):
        with torch.no_grad():
            # Assume that depth and grid filters are run earlier.
            cloud = local_feature_cloud(cloud, self.cfg)

            cloud = self.model(cloud)
            cloud.update_points()
        output_cloud = cloud.to_structured_array()
        return output_cloud

    def spin(self):
        """
        compute ouster point cloud error wrt ground truth
        """
        fig = plt.figure()
        icp_errs = []
        angles = []
        fpath = '/home/ruslan/Desktop/bias_estimation-point-to-point_depth_correction_%s.csv' % self.depth_correction
        write(fpath, 'Incidence angle [deg], ICP distance [m], Distance to board error [m]\n')
        prev_angle = None
        while not rospy.is_shutdown():

            if self.ouster_pose is None:
                rospy.logwarn_once('Ouster pose is not yet available')
                continue

            try:
                tf = self.tf_buffer.lookup_transform(self.static_frame, 'base_marker',
                                                     rospy.Time.now())
                self.board_pose = numpify(tf.transform)
            except tf2_ros.TransformException as ex:
                rospy.logwarn('Could not find transform from %s to %s: %s',
                              'base_marker', self.static_frame, ex)
                return
            if self.board_pose is None:
                rospy.logwarn_once('Board pose is not yet available')
                continue
            ouster_cloud = numpify(self.ouster_msg)
            if ouster_cloud.ndim == 2:
                ouster_cloud = ouster_cloud.reshape((-1,))

            # transform clouds to the same coordinate frame
            board_cloud = transform_cloud(self.board_cloud, self.board_pose)
            ouster_cloud = transform_cloud(ouster_cloud, self.ouster_pose)

            # filter clouds
            board_cloud = filter_box(board_cloud,
                                     box_center=self.measurements['subt_base'] + np.asarray([0, 0, self.board_height / 2]),
                                     box_size=self.board_box_size)
            ouster_cloud = filter_box(ouster_cloud,
                                      box_center=self.measurements['subt_base'] + np.asarray([0, 0, self.board_height / 2]),
                                      box_size=self.board_box_size)

            # compute ICP distance between clouds
            if len(ouster_cloud) > 0:
                if self.depth_correction:
                    t0 = time()
                    ouster_cloud = self.correction(ouster_cloud)
                    rospy.logdebug('Depth correction took: %f [sec]' % (time() - t0))

                ouster_points = structured_to_unstructured(ouster_cloud[['x', 'y', 'z']])
                board_points = structured_to_unstructured(board_cloud[['x', 'y', 'z']])
                assert ouster_points.ndim == board_points.ndim == 2
                assert ouster_points.shape[1] == board_points.shape[1] == 3  # (N, 3)

                # write data
                if prev_angle is None:
                    prev_angle = self.board_angle
                if np.abs(self.board_angle - prev_angle) > np.deg2rad(2.0):
                    # point to POINT distance
                    # icp_dist = point_to_point_dist([board_points, ouster_points],
                    #                                icp_inlier_ratio=0.9, differentiable=False)

                    # point to PLANE distance
                    v_diff = ouster_points - self.board_pose[:3, 3]
                    k = v_diff @ self.board_normal[None].T
                    ouster_points_plane = ouster_points - (k.squeeze() * self.board_normal[None].T).T
                    icp_dist = np.mean(np.linalg.norm(ouster_points_plane - ouster_points, axis=-1))

                    rospy.loginfo('ICP distance between clouds: %.3f for estimated angle [deg]: %.1f' %
                                  (icp_dist.item(), np.rad2deg(self.board_angle)))

                    angles.append(np.rad2deg(self.board_angle))
                    icp_errs.append(icp_dist)
                    rospy.loginfo('Mean ICP error: %f [m]' % np.mean(icp_errs).item())

                    plt.plot(angles, icp_errs, color='b')
                    plt.grid(visible=True)
                    plt.pause(0.01)
                    plt.draw()

                    prev_angle = self.board_angle
                    dist_err = ouster_points[:, 0].mean() - self.gt_dist_to_board
                    append(fpath, ', '.join(['%.3f' % s for s in [np.rad2deg(self.board_angle).item(),
                                                                  icp_dist.item(),
                                                                  dist_err]]) + '\n')
            else:
                rospy.logwarn_once('No board points measured with lidar')

            # publish clouds
            board_cloud_msg = msgify(PointCloud2, board_cloud)
            board_cloud_msg.header.frame_id = self.static_frame
            board_cloud_msg.header.stamp = self.ouster_msg.header.stamp
            self.cloud_pub.publish(board_cloud_msg)

            ouster_msg_filtered = msgify(PointCloud2, ouster_cloud)
            ouster_msg_filtered.header.stamp = self.ouster_msg.header.stamp
            ouster_msg_filtered.header.frame_id = self.static_frame
            self.filtered_cloud_pub.publish(ouster_msg_filtered)

    def generate_board_cloud(self, n_pts=1000):
        np.random.seed(135)
        length = self.board_length
        height = self.board_height
        width = self.board_width
        x0, y0, z0 = self.measurements['subt_corner'] - self.measurements['subt_base']
        z0 -= height
        origin = np.asarray([x0, y0, z0])  # in base frame
        points = (width, length, height) * np.random.uniform(0, 1, (n_pts, 3)) + origin
        cloud = unstructured_to_structured(np.asarray(points, dtype=np.float32), names=['x', 'y', 'z'])
        return cloud

    def measurements_to_transforms(self):
        t1 = Transformation(frame='base_marker', child_frame='crystal')
        t1.translation = self.measurements['subt_crystal'] - self.measurements['subt_base']
        t1.rotation = np.asarray([0, 0, 0, 1])

        t2 = Transformation(frame='base_marker', child_frame='corner_marker')
        t2.translation = self.measurements['subt_corner'] - self.measurements['subt_base']
        t2.rotation = np.asarray([0, 0, 0, 1])
        return [t1, t2]

    def ouster_process(self, ouster_msg):
        """
        publishing static transform: lidar pose relative to origin (fixed frame)
        """
        with self.ouster_lock:
            # map (subt) -> ouster lidar
            tr = TransformStamped()
            tr.header.stamp = ouster_msg.header.stamp
            tr.header.frame_id = self.static_frame
            tr.child_frame_id = ouster_msg.header.frame_id
            tr.transform = msgify(Transform, self.Tr_world_ouster)
            self.tf_br.sendTransform(tr)

            # cloud poses in static frame
            self.ouster_pose = numpify(tr.transform)
            self.ouster_msg = ouster_msg

    def leica_process(self, crystal_point_msg):
        with self.leica_lock:
            # subt -> base
            tr = TransformStamped()
            tr.header.stamp = crystal_point_msg.header.stamp
            tr.header.frame_id = self.static_frame
            tr.child_frame_id = 'base'
            # assume base is not moving
            tr.transform.translation.x = self.measurements['subt_base'][0]
            tr.transform.translation.y = self.measurements['subt_base'][1]
            tr.transform.translation.z = self.measurements['subt_base'][2]
            tr.transform.rotation.x = 0
            tr.transform.rotation.y = 0
            tr.transform.rotation.z = 0
            tr.transform.rotation.w = 1
            self.tf_br.sendTransform(tr)

            # base -> base_marker
            tr = TransformStamped()
            tr.header.stamp = crystal_point_msg.header.stamp
            tr.header.frame_id = 'base'
            tr.child_frame_id = 'base_marker'
            # assume base is not moving
            tr.transform.translation.x = 0
            tr.transform.translation.y = 0
            tr.transform.translation.z = 0

            # compute from 3 points (orientation of base marker in origin/fixed frame (subt))
            crystal_subt_pose = np.asarray([crystal_point_msg.point.x,
                                            crystal_point_msg.point.y,
                                            crystal_point_msg.point.z])
            v1 = crystal_subt_pose - self.measurements['subt_base']
            v1 = normalize(v1)
            angle_z = np.arctan2(v1[1], v1[0]) - np.pi/2
            self.board_normal = normalize(np.cross(v1, np.array([0, 0, 1])))
            self.board_angle = angle_z
            q = quaternion_from_euler(0, 0, angle_z)

            tr.transform.rotation.x = q[0]
            tr.transform.rotation.y = q[1]
            tr.transform.rotation.z = q[2]
            tr.transform.rotation.w = q[3]
            self.tf_br.sendTransform(tr)

            # plane normal arrow
            q = quaternion_from_euler(0, 0, angle_z - np.pi)
            arrow = create_marker(p=[0, 0, self.board_height / 2], q=q, scale=[0.25, 0.05, 0.05], type=Marker.ARROW)
            arrow.header.stamp = crystal_point_msg.header.stamp
            arrow.header.frame_id = 'base'
            self.arrow_pub.publish(arrow)

            plane = create_marker(p=[0, 0, self.board_height / 2], q=q,
                                  scale=[self.board_width, self.board_length, self.board_height],
                                  alpha=1.0,
                                  color=[0, 0, 1],
                                  type=Marker.CUBE)
            plane.header.stamp = crystal_point_msg.header.stamp
            plane.header.frame_id = 'base'
            self.plane_pub.publish(plane)

            # base_marker -> UR marker
            for transf in self.static_transforms:
                tr = TransformStamped()
                tr.header.stamp = crystal_point_msg.header.stamp
                tr.header.frame_id = transf.frame
                tr.child_frame_id = transf.child_frame
                tr.transform.translation.x = transf.translation[0]
                tr.transform.translation.y = transf.translation[1]
                tr.transform.translation.z = transf.translation[2]
                tr.transform.rotation.x = transf.rotation[0]
                tr.transform.rotation.y = transf.rotation[1]
                tr.transform.rotation.z = transf.rotation[2]
                tr.transform.rotation.w = transf.rotation[3]
                self.tf_br.sendTransform(tr)


def main():
    rospy.init_node('leica_processor', log_level=rospy.INFO)
    node = Process()
    rospy.spin()


if __name__ == '__main__':
    main()
