#!/usr/bin/env python

from __future__ import absolute_import, division, print_function
import rospy
from geometry_msgs.msg import PointStamped
import numpy as np
from geometry_msgs.msg import TransformStamped, Transform
from sensor_msgs.msg import PointCloud2
import tf2_ros
from tf.transformations import quaternion_from_euler, quaternion_matrix
from visualization_msgs.msg import Marker
from numpy.lib.recfunctions import unstructured_to_structured, structured_to_unstructured
from ros_numpy import msgify, numpify
from depth_correction.loss import point_to_point_dist, point_to_plane_dist
from depth_correction.filters import filter_box
from depth_correction.io import write, append
import open3d as o3d
from scipy.spatial.transform import Rotation
import time
from matplotlib import pyplot as plt


def create_marker(p=None, q=None, scale=None):
    if scale is None:
        scale = [1, 1, 1]
    if q is None:
        q = [0, 0, 0, 1]
    if p is None:
        p = [0, 0, 0]
    marker = Marker()
    marker.type = Marker.ARROW
    marker.action = Marker.ADD
    marker.pose.position.x = p[0]
    marker.pose.position.y = p[1]
    marker.pose.position.z = p[2]
    marker.pose.orientation.x = q[0]
    marker.pose.orientation.y = q[1]
    marker.pose.orientation.z = q[2]
    marker.pose.orientation.w = q[3]
    marker.scale.x = scale[0]
    marker.scale.y = scale[1]
    marker.scale.z = scale[2]
    marker.color.a = 0.5
    marker.color.r = 0.0
    marker.color.g = 1.0
    marker.color.b = 0.0
    return marker


class Transformation(object):
    def __init__(self, frame, child_frame, translation=None, rotation=None):
        if translation is None:
            translation = [0, 0, 0]
        if rotation is None:
            rotation = [0, 0, 0, 1]
        self.frame = frame
        self.child_frame = child_frame
        self.translation = translation
        self.rotation = rotation

    def __str__(self):
        return 'Translation: %s, Rotation: %s' % (self.translation, self.rotation)


def normalize(v):
    norm = np.linalg.norm(v)
    if norm == 0:
        return v
    return v / norm

def transform_cloud(cloud, Tr):
    assert isinstance(cloud, np.ndarray)
    if cloud.dtype.names:
        pts = structured_to_unstructured(cloud[['x', 'y', 'z']])
    else:
        pts = cloud
    R, t = Tr[:-1, :-1], Tr[:-1, -1:]
    pts_tr = pts @ R.T + t.T
    if cloud.dtype.names:
        cloud_tr = cloud.copy()
        cloud_tr[['x', 'y', 'z']] = unstructured_to_structured(pts_tr, names=['x', 'y', 'z'])
    else:
        cloud_tr = pts_tr
    return cloud_tr


class Process(object):

    def __init__(self):
        # for depth_correction_2023-02-06-16-15-50.bag
        self.measurements = {'subt_TL': np.asarray([8.5736, 0.9518, 0.4274]),
                             'subt_BL': np.asarray([8.5730, 0.9573, -0.5322]),
                             'subt_TR': None,
                             }
        # for point cloud filtering
        self.board_height = self.measurements['subt_TL'][2] - self.measurements['subt_BL'][2] + 0.02  # Z
        # self.board_length = self.measurements['subt_TR'][1] - self.measurements['subt_TL'][1]  # Y
        self.board_length = None
        self.board_width = 0.015  # X
        # self.board_box_size = 0.6 * np.asarray([self.board_height, self.board_length, self.board_height])
        self.board_box_size = None

        # TODO: find it precisely
        # tranformation between lidar pose and origin (subt frame)
        self.Tr_world_ouster = np.array([[1, 0, 0, 0],
                                         [0, 1, 0, 0],
                                         [0, 0, 1, -0.10],
                                         [0, 0, 0, 1]])
        # for black board experiment with bag file: depth_correction_black_board_2023-02-06-16-46-40.bag
        # self.Tr_world_ouster[:3, :3] = Rotation.from_euler('y', 0.7, degrees=True).as_matrix()

        # for white board experiment with bag file: depth_correction_2023-02-06-16-15-50.bag
        Ry = Rotation.from_euler('y', 0.2, degrees=True).as_matrix()
        Rz = Rotation.from_euler('z', -6.0, degrees=True).as_matrix()
        self.Tr_world_ouster[:3, :3] = Ry @ Rz

        self.static_frame = 'subt'
        self.ouster_pose = None
        self.ouster_msg = None
        self.board_pose = None
        self.board_angle = None
        self.board_normal = None
        self.static_transforms = self.measurements_to_transforms()
        self.board_cloud = None
        self.tf_br = tf2_ros.TransformBroadcaster()
        self.tf_buffer = tf2_ros.Buffer(cache_time=rospy.Duration.from_sec(1.0))
        self.tf_listerner = tf2_ros.TransformListener(self.tf_buffer)
        self.marker_pub = rospy.Publisher('normal', Marker, queue_size=1)
        self.board_cloud_pub = rospy.Publisher('board_cloud', PointCloud2, queue_size=1)
        self.filtered_cloud_pub = rospy.Publisher('ouster_board_cloud', PointCloud2, queue_size=1)
        self.leica_sub = rospy.Subscriber('crystal_points',
                                          PointStamped, callback=self.leica_process, queue_size=2)
        self.ouster_sub = rospy.Subscriber('cloud', PointCloud2, callback=self.ouster_process, queue_size=2)
        self.spin()

    def spin(self):
        """
        compute ouster point cloud error wrt ground truth
        """
        time.sleep(1.0)
        fig = plt.figure()
        icp_errs = []
        angles = []
        fpath = '/home/ruslan/Desktop/bias_estimation-point-to-point_black_board_big.csv'
        write(fpath, 'Incidence angle [deg], ICP distance [m]\n')
        prev_angle = None
        while not rospy.is_shutdown():
            if self.ouster_pose is None:
                rospy.logwarn_once('Ouster pose is not yet available')
                continue
            if self.board_cloud is None:
                rospy.logwarn_once('Board cloud is not yet available')
                continue

            try:
                tf = self.tf_buffer.lookup_transform(self.static_frame, 'board_base', rospy.Time.now())
                self.board_pose = numpify(tf.transform)
            except tf2_ros.TransformException as ex:
                rospy.logwarn('Could not find transform from %s to board_base: %s', self.static_frame, ex)
                return

            ouster_cloud = numpify(self.ouster_msg)
            if ouster_cloud.ndim == 2:
                ouster_cloud = ouster_cloud.reshape((-1,))
            board_cloud = self.board_cloud

            # transform clouds to the same coordinate frame
            board_cloud = transform_cloud(board_cloud, self.board_pose)
            ouster_cloud = transform_cloud(ouster_cloud, self.ouster_pose)

            # filter clouds
            board_cloud = filter_box(board_cloud,
                                     pose=self.board_pose[:3, 3] + np.asarray([0, -self.board_length / 2, 0]),
                                     size=self.board_box_size)
            ouster_cloud = filter_box(ouster_cloud,
                                      pose=self.board_pose[:3, 3] + np.asarray([0, -self.board_length / 2, 0]),
                                      size=self.board_box_size)

            # publish clouds
            board_cloud_msg = msgify(PointCloud2, board_cloud)
            board_cloud_msg.header.frame_id = self.static_frame
            board_cloud_msg.header.stamp = self.ouster_msg.header.stamp
            self.board_cloud_pub.publish(board_cloud_msg)

            ouster_msg_filtered = msgify(PointCloud2, ouster_cloud)
            ouster_msg_filtered.header.stamp = self.ouster_msg.header.stamp
            ouster_msg_filtered.header.frame_id = self.static_frame
            self.filtered_cloud_pub.publish(ouster_msg_filtered)

            if len(ouster_cloud) > 5:

                if prev_angle is None:
                    prev_angle = self.board_angle
                if np.abs(self.board_angle - prev_angle) > np.deg2rad(2.0):

                    ouster_points = structured_to_unstructured(ouster_cloud[['x', 'y', 'z']])
                    board_points = structured_to_unstructured(board_cloud[['x', 'y', 'z']])
                    assert ouster_points.ndim == board_points.ndim == 2
                    assert ouster_points.shape[1] == board_points.shape[1] == 3  # (N, 3)

                    # icp_dist = point_to_point_dist([board_points, ouster_points], icp_inlier_ratio=0.9, differentiable=False)

                    # point to PLANE distance
                    v_diff = ouster_points - self.board_pose[:3, 3]
                    k = v_diff @ self.board_normal[None].T
                    ouster_points_plane = ouster_points - (k.squeeze() * self.board_normal[None].T).T
                    icp_dist = np.mean(np.linalg.norm(ouster_points_plane - ouster_points, axis=-1))

                    rospy.loginfo('ICP distance between clouds: %.3f for estimated angle [deg]: %.1f' %
                                  (icp_dist.item(), np.rad2deg(self.board_angle)))

                    angles.append(np.rad2deg(self.board_angle))
                    icp_errs.append(icp_dist)

                    plt.plot(angles, icp_errs, color='b')
                    plt.grid(visible=True)
                    plt.pause(0.01)
                    plt.draw()

                    # write data
                    prev_angle = self.board_angle
                    append(fpath, ', '.join(['%.3f' % s for s in [np.rad2deg(self.board_angle).item(),
                                                                  icp_dist.item()]]) + '\n')

    def generate_board_cloud(self, n_pts=4000):
        assert self.measurements['subt_TR'] is not None
        np.random.seed(135)

        length = self.measurements['subt_TL'][1] - self.measurements['subt_TR'][1]
        self.board_length = length
        height = self.measurements['subt_TL'][2] - self.measurements['subt_BL'][2]
        width = 0.015  # 1 cm
        self.board_box_size = 0.6 * np.asarray([self.board_height, self.board_length, self.board_height])
        x0, y0, z0 = 0, 0, 0
        z0 -= height / 2
        y0 -= length
        origin = np.asarray([x0, y0, z0])  # in base frame
        points = (width, length, height) * np.random.uniform(0, 1, (n_pts, 3)) + origin
        cloud = unstructured_to_structured(np.asarray(points, dtype=np.float32), names=['x', 'y', 'z'])
        return cloud

    def measurements_to_transforms(self):
        base_pose = (self.measurements['subt_BL'] + self.measurements['subt_TL']) / 2.
        t1 = Transformation(frame='board_base', child_frame='TL_corner')
        t1.translation = self.measurements['subt_TL'] - base_pose
        t1.rotation = np.asarray([0, 0, 0, 1])

        t2 = Transformation(frame='board_base', child_frame='BL_corner')
        t2.translation = self.measurements['subt_BL'] - base_pose
        t2.rotation = np.asarray([0, 0, 0, 1])
        return [t1, t2]

    def ouster_process(self, ouster_msg):
        """
        manually finding lidar pose relative to origin (fixed frame)
        """
        # map (subt) -> ouster lidar
        tr = TransformStamped()
        tr.header.stamp = ouster_msg.header.stamp
        tr.header.frame_id = self.static_frame
        tr.child_frame_id = ouster_msg.header.frame_id
        tr.transform = msgify(Transform, self.Tr_world_ouster)
        self.tf_br.sendTransform(tr)

        # cloud poses in static frame
        self.ouster_pose = numpify(tr.transform)
        self.ouster_msg = ouster_msg

    def leica_process(self, crystal_point_msg):
        crystal_subt_pose = np.asarray([crystal_point_msg.point.x,
                                        crystal_point_msg.point.y,
                                        crystal_point_msg.point.z])
        base_pose = (self.measurements['subt_BL'] + self.measurements['subt_TL']) / 2.

        if self.measurements['subt_TR'] is None:
            crystal_TR_corner_offset = np.array([0., 0., 0.])
            self.measurements['subt_TR'] = crystal_subt_pose + crystal_TR_corner_offset

            t3 = Transformation(frame='board_base', child_frame='TR_corner')
            t3.translation = self.measurements['subt_TR'] - base_pose
            t3.rotation = np.asarray([0, 0, 0, 1])
            self.static_transforms.append(t3)

            self.board_cloud = self.generate_board_cloud()
            rospy.logwarn('GT board cloud is defined')

        # subt -> base
        tr = TransformStamped()
        tr.header.stamp = crystal_point_msg.header.stamp
        tr.header.frame_id = self.static_frame
        tr.child_frame_id = 'base'
        # assume base is not moving
        tr.transform.translation.x = base_pose[0]
        tr.transform.translation.y = base_pose[1]
        tr.transform.translation.z = base_pose[2]
        tr.transform.rotation.x = 0
        tr.transform.rotation.y = 0
        tr.transform.rotation.z = 0
        tr.transform.rotation.w = 1
        self.tf_br.sendTransform(tr)

        # base -> base_marker
        tr = TransformStamped()
        tr.header.stamp = crystal_point_msg.header.stamp
        tr.header.frame_id = 'base'
        tr.child_frame_id = 'board_base'
        # assume base is not moving
        tr.transform.translation.x = 0
        tr.transform.translation.y = 0
        tr.transform.translation.z = 0

        # compute from 3 points (orientation of base marker in origin/fixed frame (subt))
        v1 = crystal_subt_pose - base_pose
        v1 = normalize(v1)
        angle_y = -np.arctan2(v1[2], v1[0]) + np.pi/2
        self.board_angle = angle_y
        self.board_normal = normalize(np.cross(v1, np.array([0, 1, 0])))
        q = quaternion_from_euler(0, angle_y, 0)

        tr.transform.rotation.x = q[0]
        tr.transform.rotation.y = q[1]
        tr.transform.rotation.z = q[2]
        tr.transform.rotation.w = q[3]
        self.tf_br.sendTransform(tr)

        # plane normal arrow
        arrow = create_marker(p=[0, 0, 0], q=q, scale=[1, 0.1, 0.1])
        arrow.header.stamp = crystal_point_msg.header.stamp
        arrow.header.frame_id = 'base'
        self.marker_pub.publish(arrow)

        # board corners from static transforms
        for transf in self.static_transforms:
            tr = TransformStamped()
            tr.header.stamp = crystal_point_msg.header.stamp
            tr.header.frame_id = transf.frame
            tr.child_frame_id = transf.child_frame
            tr.transform.translation.x = transf.translation[0]
            tr.transform.translation.y = transf.translation[1]
            tr.transform.translation.z = transf.translation[2]
            tr.transform.rotation.x = transf.rotation[0]
            tr.transform.rotation.y = transf.rotation[1]
            tr.transform.rotation.z = transf.rotation[2]
            tr.transform.rotation.w = transf.rotation[3]
            self.tf_br.sendTransform(tr)


def main():
    rospy.init_node('leica_processor', log_level=rospy.DEBUG)
    node = Process()
    rospy.spin()


if __name__ == '__main__':
    main()
