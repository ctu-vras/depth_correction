#!/usr/bin/env python

import torch
import rospy
from sensor_msgs.msg import PointCloud2
from timeit import default_timer as timer
from ros_numpy import numpify, msgify
import tf2_ros
import numpy as np
import importlib
import open3d as o3d
from numpy.lib.recfunctions import structured_to_unstructured, unstructured_to_structured
from depth_correction.metrics import chamfer_distance


class ReconstructionEval:
    """
    This ROS node subscribes to constructed map topic with PointCloud2 msgs
    and compares it to ground truth mesh of the environment.
    Metrics for comparison are taken from here:
    https://pytorch3d.readthedocs.io/en/latest/modules/loss.html#pytorch3d.loss
    """

    def __init__(self, device_id=0):
        self.tf = tf2_ros.Buffer(cache_time=rospy.Duration(100))
        self.tl = tf2_ros.TransformListener(self.tf)
        # Set the device
        if torch.cuda.is_available():
            self.device = torch.device("cuda:" + str(device_id))
            rospy.loginfo("Using GPU device id: %i, name: %s", device_id, torch.cuda.get_device_name(device_id))
        else:
            rospy.loginfo("Using CPU")
            self.device = torch.device("cpu")
        # parameters
        self.map_topic = rospy.get_param('~map_topic', 'cloud')
        self.max_age = rospy.get_param('~max_age', 1.0)
        self.rate = rospy.get_param('~eval_rate', 1.0)

        self.pc_msg = None
        self.map_frame = None
        self.map = None

        self.dataset_path = rospy.get_param('~dataset_path', "")
        self.dataset_name = rospy.get_param('~dataset', 'newer_college/01_short_experiment')
        self.dataset_poses_path = rospy.get_param('~dataset_poses_path', "")
        imported_module = importlib.import_module("data.%s" % self.dataset_name.split('/')[0])
        Dataset = getattr(imported_module, "Dataset")
        if self.dataset_path:
            self.dataset = Dataset(path=self.dataset_path, poses_path=self.dataset_poses_path)
        else:
            self.dataset = Dataset(self.dataset_name, poses_path=self.dataset_poses_path)

        self.map_gt = self.load_ground_truth()

        # obtaining the constructed map (reward cloud)
        rospy.Subscriber(self.map_topic, PointCloud2, self.get_constructed_map)
        self.pc_pub = rospy.Publisher('~cloud_gt', PointCloud2, queue_size=1)

        # evaluation runner
        rospy.Timer(rospy.Duration(1. / self.rate), self.run)

    def load_ground_truth(self, voxel_size=0.5):
        if not getattr(self.dataset, "get_ground_truth_cloud"):
            rospy.logwarn_once("Dataset does not have ground truth map")
            return
        rospy.loginfo("Loading ground truth cloud...")
        cloud = self.dataset.get_ground_truth_cloud(voxel_size=voxel_size)
        if isinstance(cloud, np.ndarray):
            cloud = torch.from_numpy(cloud)
        elif isinstance(cloud, o3d.geometry.PointCloud):
            cloud = torch.from_numpy(np.asarray(cloud.points))
        cloud = torch.as_tensor(cloud.reshape([-1, 3]), dtype=torch.float32).unsqueeze(0).to(self.device)
        return cloud

    def get_constructed_map(self, pc_msg):
        assert isinstance(pc_msg, PointCloud2)
        rospy.logdebug('Received point cloud message')
        t0 = timer()
        self.pc_msg = pc_msg
        self.map_frame = pc_msg.header.frame_id
        map = numpify(self.pc_msg)
        map = structured_to_unstructured(map[['x', 'y', 'z']])
        self.map = torch.as_tensor(map.reshape([-1, 3]), dtype=torch.float32).unsqueeze(0).to(self.device)
        assert self.map.dim() == 3
        assert self.map.size()[2] >= 3
        rospy.logdebug('Point cloud conversion took: %.3f s', timer() - t0)

    def run(self, event):
        map = self.map
        if map is None:
            rospy.logwarn('Evaluation: Map cloud is not yet received')
            return None

        assert isinstance(map, torch.Tensor)
        assert map.dim() == 3
        assert map.size()[2] >= 3  # (1, N1, >=3)

        # Discard old messages.
        time_stamp = rospy.Time.now()
        age = (time_stamp - self.pc_msg.header.stamp).to_sec()
        if age > self.max_age:
            rospy.logwarn('Evaluation: Discarding points %.1f s > %.1f s old.', age, self.max_age)
            return None

        rospy.logdebug(f'Received map of size {map.size()} for evaluation...')
        # compare point cloud to mesh here
        with torch.no_grad():
            cd = chamfer_distance(map, self.map_gt)
            # cd = chamfer_distance(self.map_gt, map)
            rospy.loginfo("Distance from constructed map to ground truth: %f", cd.item())

            # publish ground truth cloud here
            pcd_gt_msg = msgify(PointCloud2,
                                unstructured_to_structured(self.map_gt.squeeze().cpu().numpy(), names=['x', 'y', 'z']))
            pcd_gt_msg.header.stamp = self.pc_msg.header.stamp
            pcd_gt_msg.header.frame_id = 'map'
            self.pc_pub.publish(pcd_gt_msg)


if __name__ == '__main__':
    rospy.init_node('reconstruction_eval', log_level=rospy.DEBUG)
    proc = ReconstructionEval(device_id=rospy.get_param('~gpu_id', 0))
    rospy.loginfo('Mapping evaluation node is initialized.')
    rospy.spin()
