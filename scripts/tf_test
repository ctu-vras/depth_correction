#!/usr/bin/env python
"""Node providing robot data from various datasets for SLAM evaluation."""
from __future__ import absolute_import, division, print_function
from geometry_msgs.msg import Transform, TransformStamped
import numpy as np
from ros_numpy import msgify, numpify
import rospy
from tf2_msgs.msg import TFMessage
from data.newer_college import Dataset


class RobotData(object):
    def __init__(self):
        self.period = rospy.get_param('~period', 1.0)
        self.delay_start = rospy.get_param('~delay_start', 1.0)
        self.tf_pub = rospy.Publisher('/tf', TFMessage, queue_size=2, latch=True)
        self.dataset = Dataset(name='newer_college/01_short_experiment/step_10')
        self.rate = rospy.Rate(100.0)

    def publish_transform(self, T, stamp, frame, child_frame):
        # publish transformation between sensors
        tf = TransformStamped()
        tf.header.stamp = stamp
        tf.header.frame_id = frame
        tf.child_frame_id = child_frame
        tf.transform = msgify(Transform, T)
        self.tf_pub.publish(TFMessage([tf]))

    def spin(self):
        rospy.sleep(rospy.Duration(self.delay_start))
        rospy.loginfo('Publishing robot data.')
        while True:
            if rospy.is_shutdown():
                rospy.loginfo('Shutting down.')
                break
            now = rospy.Time.now()
            self.publish_transform(T=self.dataset.calibration['T_lidar2lidar_imu'],
                                   stamp=now, frame='lidar', child_frame='lidar_imu')
            self.publish_transform(T=np.linalg.inv(self.dataset.calibration['T_lidar_imu2cam_left']),
                                   stamp=now, frame='lidar_imu', child_frame='camera_left')
            # self.publish_transform(T=self.dataset.calibration['T_lidar_imu2cam_right'],
            #                        stamp=now, frame='lidar_imu', child_frame='camera_right')
            self.publish_transform(T=self.dataset.calibration['T_cam2cam_opt'],
                                   stamp=now, frame='camera_left', child_frame='camera_left_optical')
            self.rate.sleep()


def main():
    rospy.init_node('RobotData')
    node = RobotData()
    # rospy.spin()
    node.spin()


if __name__ == '__main__':
    main()
